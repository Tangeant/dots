#!/usr/bin/env bash

# array that stores all window classes that are supposed to be floating windows
FLOATING_WINDOWS=( Lxappearance Arandr Viewnior feh mpv Font-manager Galculator Nitrogen Oblogout Pavucontrol Peek rofi Xfce4-appfinder gcolor3 gmrun lxterminal file-roller floaterm variety Yad )

# array that stores the window classes that are supposed to be pseudo-tiled
PSEUDOT_WINDOWS=( Alacritty kitty firefox qutebrowser Geany Thunar Pcmanfm dropdown TelegramDesktop spotify nautilus skype file-roller transmission-gtk wpa_gui smplayer vlc GIMP )

# array that stores the window classes that are supposed to be private windows
PRIVATE_WINDOWS=( firefox qutebrowser )

# array to store windows that should be sticky
STICKY_WINDOWS=( dropdown conky astime )

# array to store windows that should be on the top layer
ABOVE_LAYER=( Docky Plank wbar dockbarx )

# array that stores all terminals
TERMINALS=( x-terminal-emulator mate-terminal gnome-terminal xfce4-terminal urxvt rxvt uxterm xterm roxterm lxterminal terminology st qterminal lilyterm tilix terminix konsole kitty guake tilda Alacritty dropdown hyper )

# arrays to store applications that are assigned to each workspace
WKSP_1_WINDOWS=(  )
WKSP_2_WINDOWS=( qutebrowser firefox vivaldi-stable )
WKSP_3_WINDOWS=( smplayer vlc mpv )
WKSP_4_WINDOWS=( Thunar Gparted nnn ranger Pcmanfm )
WKSP_5_WINDOWS=( TelegramDesktop )
WKSP_6_WINDOWS=( neovim Geany libreoffice libreoffice-startcenter Zathura )
WKSP_7_WINDOWS=( Gimp Pinta Inkscape )
WKSP_8_WINDOWS=( TelegramDesktop Uget-gtk )
WKSP_9_WINDOWS=( SystemMonitor gtop )
WKSP_10_WINDOWS=( Meld )

# arrays to store applications that need to be 'followed' i.e. change focus to them as they launch
FOLLOW_WINDOWS=( st Alacritty XTerm UXTerm URxvt qutebrowser firefox vivaldi stable neovim Thunar Gparted nnn ranger smplayer vlc mpv Geany libreoffice libreoffice-startcenter Zathura Gimp Pinta Inkscape TelegramDesktop Uget-gtk SystemMonitor gtop )

# array to store applications to be unmanaged
UNMANAGE=( screenkey conky gnome-pie 9menu tint2 trayer xmobar dzen2 )

# first, let's change the positional arguments into labels we can understand
WINDOW_ID="$1"
WINDOW_CLASS="$2"
WINDOW_INSTANCE="$3"
WINDOW_CONSEQ="$4"

# next, keep a string for the rules that will be generated
RULES=""

# now, get more details about monitors and workspace numbers
mapfile -t ALL_MONITORS < <( bspc query -M --names )
FOCUSED_MONITOR="$( bspc query -M -m focused --names )"
WKSP_COUNT="$( bspc query -D --names | wc -l )"
WKSP_PER_MONITOR="$(( $WKSP_COUNT / ${#ALL_MONITORS[@]} ))"
FOCUSED_MONITOR_NUM=""
for IDX in "${!ALL_MONITORS[@]}"; do
   if [[ "${ALL_MONITORS[$IDX]}" = "${FOCUSED_MONITOR}" ]]; then
       FOCUSED_MONITOR_NUM="$IDX"
   fi
done

# decide where to put them based on the array that the class name belongs to
for WKSP_IDX in $( seq 1 $WKSP_PER_MONITOR ); do
   WKSP="WKSP_${WKSP_IDX}_WINDOWS[@]"
   if [[ " ${!WKSP} " =~ " ${WINDOW_CLASS} " ]]; then
      RULES="$RULES desktop=^$(( $FOCUSED_MONITOR_NUM * $WKSP_PER_MONITOR + $WKSP_IDX ))"
   fi
done

# if a window class is mentioned in the array that contains windows that should have follow behavior, add that to the rules string
if [[ " ${FOLLOW_WINDOWS[@]} " =~ " ${WINDOW_CLASS} " ]]; then
   RULES="$RULES follow=on"
fi

# if a window class is mentioned in the array that contains windows that should be floating, add that to the rules string
if [[ " ${FLOATING_WINDOWS[@]} " =~ " ${WINDOW_CLASS} " ]]; then
   RULES="$RULES state=floating center=on"
fi

# if a window class is mentioned in the array that contains windows that should be pseudo-tiling, add that to the rules string and set dimensions based on certain window classes
if [[ " ${PSEUDOT_WINDOWS[@]} " =~ " ${WINDOW_CLASS} " ]]; then
	RULES="$RULES state=pseudo_tiled"
	if [[ " ${TERMINALS[@]} " =~ " ${WINDOW_CLASS} " ]]; then
		 RULES="$RULES rectangle=1200x900+0+0"
	else 
		RULES="$RULES rectangle=2400x1350+0+0"
	fi
fi

# if a window class is mentioned in the array that contains windows that should be private, add that to the rules string
if [[ " ${PRIVATE_WINDOWS[@]} " =~ " ${WINDOW_CLASS} " ]]; then
   RULES="$RULES state=private"
fi

# if a window class is mentioned in the array that contains windows that should be sticky, add that to the rules string
if [[ " ${STICKY_WINDOWS[@]} " =~ " ${WINDOW_CLASS} " ]]; then
   RULES="$RULES state=sticky"
fi

# if a window class is mentioned in the array that contains windows that should be above, add that to the rules string
if [[ " ${ABOVE_LAYER[@]} " =~ " ${WINDOW_CLASS} " ]]; then
   RULES="$RULES layer=above"
fi

# if a window class is mentioned in the array that contains windows that should be unmanaged, add that to the rules string
if [[ " ${UNMANAGED[@]} " =~ " ${WINDOW_CLASS} " ]]; then
   RULES="$RULES manage=off border=off"
fi
# clear all rules and set window to float + follow + center if they are dialogs
WINDOW_TYPE="$( xprop -id "$1" -notype -f _NET_WM_WINDOW_TYPE 32a '=$0\n' _NET_WM_WINDOW_TYPE | cut -f 2 -d '=' )"
if [[ "$WINDOW_TYPE" == "_NET_WM_WINDOW_TYPE_DIALOG" ]]; then
    RULES="state=floating center=on follow=on"
fi

# finally, output the rules that we generated
echo "$RULES"
